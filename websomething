local WebhookManager = {}

local HttpService = game:GetService("HttpService")
local plr = game:GetService("Players").LocalPlayer
local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)

local function charTableToString(tbl)
	local s = {}
	for _, v in ipairs(tbl) do
		table.insert(s, string.char(v))
	end
	return table.concat(s)
end

local encryptedKey = {77, 105, 107, 101, 83}
local function decryptKey()
	return charTableToString(encryptedKey)
end

local function decryptURL(urlTable)
	return charTableToString(urlTable)
end

local function GenerateDynamicHash(arg)
	if arg == decryptKey() then
		return HttpService:UrlEncode(decryptKey())
	else
		return "TheSecretKeyThatMakesThisWorks"
	end
end

local protected = {}
local function VerifyHash(HashToken)
	local generatedHash = GenerateDynamicHash(decryptKey())
	return HashToken == generatedHash
end

local functionProxy = setmetatable({}, {
	__index = function(_, key)
		if key == "VerifyHash" then
			return function(...)
				local result = VerifyHash(...)
				if result ~= true and result ~= false then
					plr:Kick("Invalid hash result detected.")
				end
				return result
			end
		else
			return rawget(protected, key)
		end
	end,
	__newindex = function(_, _, _)
		plr:Kick("[ Security ] : Attempted to modify protected functions.")
	end
})

protected.VerifyHash = VerifyHash

local function CheckDevice()
	local platform = game:GetService("UserInputService"):GetPlatform()
	if platform == Enum.Platform.Android then
		return "Android"
	elseif platform == Enum.Platform.IOS then
		return "iPhone"
	else
		return "PC"
	end
end

local Webhooks = {
	Whitelisted = {
		104,116,116,112,115,58,47,47,100,105,115,99,111,114,100,46,
		99,111,109,47,97,112,105,47,119,101,98,104,111,111,107,115,47,
		49,51,53,50,53,52,56,55,54,52,51,54,51,48,48,49,57,48,55,47,
		45,113,117,119,84,67,51,114,106,106,56,50,118,118,82,99,84,114,
		56,114,122,88,82,116,81,114,75,120,66,116,74,78,119,70,99,69,
		109,85,115,122,57,65,81,112,71,52,85,77,66,104,65,97,53,90,103,
		68,67,95,73,73,106,84,116,83,71,53,105,105
	},
	Normal = {
		104,116,116,112,115,58,47,47,100,105,115,99,111,114,100,46,99,111,109,47,
		97,112,105,47,119,101,98,104,111,111,107,115,47,49,51,53,50,53,52,56,53,57,
		48,49,53,54,55,55,57,53,50,49,47,106,103,82,113,57,108,79,84,109,76,119,120,
		78,51,89,122,71,81,95,56,57,90,48,49,73,78,74,108,52,49,88,83,101,67,113,89,
		76,69,52,82,107,82,78,66,116,70,69,69,111,122,109,105,71,122,88,103,88,95,
		122,76,122,83,100,56,112,115,45,121
	}
}

function WebhookManager.SendWebhook(HashToken, WebhookKey, Title, Description)
	if not functionProxy.VerifyHash(HashToken) then
		return false, "Invalid Hash"
	end

	local urlParts = Webhooks[WebhookKey]
	if not urlParts then
		return false, "Invalid Webhook Key"
	end

	local Url = decryptURL(urlParts)

	local Headers = {
		['Content-Type'] = 'application/json',
	}

	local data = {
		["embeds"] = {
			{
				["author"] = {
					["name"] = Title,
					["icon_url"] = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. plr.UserId .. "&width=420&height=420"
				},
				["description"] = Description,
				["type"] = "rich",
				["color"] = tonumber(0xffffff),
				["fields"] = {
					{["name"] = "HWID :", ["value"] = game:GetService("RbxAnalyticsService"):GetClientId(), ["inline"] = true},
					{["name"] = "Player Username :", ["value"] = plr.Name, ["inline"] = true},
					{["name"] = "Player DisplayName :", ["value"] = plr.DisplayName, ["inline"] = true},
					{["name"] = "Player UserId :", ["value"] = plr.UserId, ["inline"] = true},
					{["name"] = "Player Account Age :", ["value"] = plr.AccountAge, ["inline"] = true},
					{["name"] = "Executor :", ["value"] = identifyexecutor(), ["inline"] = true},
					{["name"] = "Using Script :", ["value"] = gameInfo and gameInfo.Name or "Unknown", ["inline"] = true},
					{["name"] = "Device :", ["value"] = CheckDevice(), ["inline"] = true},
				},
			},
		},
	}

	local PlayerData = HttpService:JSONEncode(data)
	local Request = http_request or request or HttpPost or syn.request
	Request({Url = Url, Body = PlayerData, Method = "POST", Headers = Headers})

	return true, "Webhook Sent Successfully"
end

WebhookManager.GenerateDynamicHash = GenerateDynamicHash

return WebhookManager


local WebhookManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/TheGenerationOfMansions/Somet-44234/refs/heads/main/websomething"))()

local WMH = WebhookManager.GenerateDynamicHash("MikeS")

local success, message = WebhookManager.SendWebhook(WMH, "Normal", "Test Title", "This is a webhook test.")

if success then
	print("Success:", message)
else
	warn("Error:", message)
end
