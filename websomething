local WebhookManager = {}

local HttpService = game:GetService("HttpService")
local plr = game:GetService("Players").LocalPlayer
local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)

local ru19hwaddhsabd = {"M", "i", "k", "e", "S"}
local function bbbbbnvcnvnnbb()
	return table.concat(ru19hwaddhsabd)
end

local function cnxvcxvbcbv(urlTable)
	return table.concat(urlTable)
end

local function bkjnfjlbjdadbjsadwa(arg)
	if arg == bbbbbnvcnvnnbb() then
		return HttpService:UrlEncode(bbbbbnvcnvnnbb())
	else
		return "TheSecretKeyThatMakesThisWorks"
	end
end

local protected = {}
local function vvvvbcbcvggvghvhvhvh(HashToken)
	local generatedHash = bkjnfjlbjdadbjsadwa(bbbbbnvcnvnnbb())
	return HashToken == generatedHash
end

local functionProxy = setmetatable({}, {
	__index = function(_, key)
		if key == "VerifyHash" then
			return function(...)
				local result = vvvvbcbcvggvghvhvhvh(...)
				if result ~= true and result ~= false then
					plr:Kick("Invalid hash result detected.")
				end
				return result
			end
		else
			return rawget(protected, key)
		end
	end,
	__newindex = function(_, _, _)
		plr:Kick("[ Security ] : Attempted to modify protected functions.")
	end
})

protected.VerifyHash = vvvvbcbcvggvghvhvhvh()

local function CheckDevice()
	local platform = game:GetService("UserInputService"):GetPlatform()
	if platform == Enum.Platform.Android then
		return "Android"
	elseif platform == Enum.Platform.IOS then
		return "iPhone"
	else
		return "PC"
	end
end

local Webhooks = {
	Whitelisted = { "h", "t", "t", "p", "s", ":", "/", "/", "d", "i", "s", "c", "o", "r", "d", ".", "c", "o", "m", "/a", "p", "i", "/w", "e", "b", "h", "o", "o", "k", "s", "/1", "3", "5", "2", "5", "4", "8", "7", "6", "4", "3", "6", "3", "0", "0", "1", "9", "0", "7", "/" },
	Blacklisted = { "h", "t", "t", "p", "s", ":", "/", "/", "d", "i", "s", "c", "o", "r", "d", ".", "c", "o", "m", "/a", "p", "i", "/w", "e", "b", "h", "o", "o", "k", "s", "/1", "3", "5", "2", "5", "4", "5", "8", "4", "5", "4", "5", "8", "0", "0", "9", "7", "0", "4", "4" },
	SecurityLogs = { "h", "t", "t", "p", "s", ":", "/", "/", "d", "i", "s", "c", "o", "r", "d", ".", "c", "o", "m", "/a", "p", "i", "/w", "e", "b", "h", "o", "o", "k", "s", "/1", "2", "8", "4", "5", "7", "6", "1", "5", "3", "4", "1", "0", "9", "9", "4", "2", "6", "8", "/" }
}

function WebhookManager.SendWebhook(HashToken, WebhookKey, Title, Description)
	if not functionProxy.VerifyHash(HashToken) then
		return false, "Invalid Hash"
	end

	local urlParts = Webhooks[WebhookKey]
	if not urlParts then
		return false, "Invalid Webhook Key"
	end

	local Url = cnxvcxvbcbv(urlParts)

	local Headers = {
		['Content-Type'] = 'application/json',
	}

	local data = {
		["embeds"] = {
			{
				["author"] = {
					["name"] = Title,
					["icon_url"] = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. plr.UserId .. "&width=420&height=420"
				},
				["description"] = Description,
				["type"] = "rich",
				["color"] = tonumber(0xffffff),
				["fields"] = {
					{["name"] = "HWID :", ["value"] = game:GetService("RbxAnalyticsService"):GetClientId(), ["inline"] = true},
					{["name"] = "Player Username :", ["value"] = plr.Name, ["inline"] = true},
					{["name"] = "Player DisplayName :", ["value"] = plr.DisplayName, ["inline"] = true},
					{["name"] = "Player UserId :", ["value"] = plr.UserId, ["inline"] = true},
					{["name"] = "Player Account Age :", ["value"] = plr.AccountAge, ["inline"] = true},
					{["name"] = "Executor :", ["value"] = identifyexecutor(), ["inline"] = true},
					{["name"] = "Using Script :", ["value"] = gameInfo and gameInfo.Name or "Unknown", ["inline"] = true},
					{["name"] = "Device :", ["value"] = CheckDevice(), ["inline"] = true},
				},
			},
		},
	}

	local PlayerData = HttpService:JSONEncode(data)

	-- Debugging log
	print("Sending webhook to URL: " .. Url)
	print("Payload: " .. PlayerData)

	local Request = http_request or request or HttpPost or syn.request
	local success, response = pcall(function()
		Request({
			Url = Url,
			Body = PlayerData,
			Method = "POST",
			Headers = Headers
		})
	end)

	-- Check for errors in the request
	if success then
		print("Webhook sent successfully!")
		return true, "Webhook Sent Successfully"
	else
		print("Error sending webhook: " .. response)
		return false, "Error sending webhook"
	end
end

WebhookManager.GenerateDynamicHash = bkjnfjlbjdadbjsadwa

return WebhookManager
